<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Jasmine Spec Runner</title>

    <link rel="stylesheet" type="text/css" href="../css/jasmine.css">
    <script type="text/javascript" src="../js/jasmine.js"></script>
    <script type="text/javascript" src="../js/jasmine-html.js"></script>
    <script type="text/javascript" src="../js/webworks.js"></script>

    <script type="text/javascript" src="spec/blackberry.app.js"></script>
    <script type="text/javascript" src="spec/blackberry.connection.js"></script>
    <script type="text/javascript" src="spec/blackberry.event.js"></script>
    <script type="text/javascript" src="spec/blackberry.identity.js"></script>
    <script type="text/javascript" src="spec/blackberry.invoke.js"></script>
    <script type="text/javascript" src="spec/blackberry.invoke.card.js"></script>
    <script type="text/javascript" src="spec/blackberry.invoked.js"></script>
    <script type="text/javascript" src="spec/blackberry.io.filetransfer.js"></script>
    <script type="text/javascript" src="spec/blackberry.io.js"></script>
    <script type="text/javascript" src="spec/blackberry.js"></script>
    <script type="text/javascript" src="spec/blackberry.pim.contacts.js"></script>
    <script type="text/javascript" src="spec/blackberry.push.js"></script>
    <script type="text/javascript" src="spec/blackberry.system.js"></script>
    <script type="text/javascript" src="spec/blackberry.ui.dialog.js"></script>
    <script type="text/javascript" src="spec/blackberry.bbm.platform.js"></script>
    <script type="text/javascript" src="spec/crossOrigin.js"></script>
    <script type="text/javascript" src="spec/remoteFunctionCall.js"></script>
    <script type="text/javascript" src="spec/blackberry.notification.js"></script>

    <script type="text/javascript">
        jasmineEnv = jasmine.getEnv();
        jasmineEnv.addReporter(new jasmine.HtmlReporter());
        jasmineEnv.specFilter = globalSpecFilter;

        function globalSpecFilter (spec) {
            return document.getElementById(getParentSuite(spec.suite).id).checked;
        }

        function getParentSuite(suite) {
            if (suite.parentSuite === null) {
                return suite;
            }
            return getParentSuite(suite.parentSuite);
        }

        function setJasmine() {
            //jasmineEnv.currentRunner_.queue.index = 0;
            //jasmineEnv.reporter.subReporters_[0] = new jasmine.HtmlReporter();
            jasmineEnv = jasmine.Env();
            jasmineEnv.addReporter(new jasmine.HtmlReporter());
            jasmineEnv.specFilter = globalSpecFilter;
        }

        function execJasmine() {
            jasmineEnv.execute();
        }

        function removeOldTests() {
            var oldTests = document.getElementsByClassName('jasmine_reporter');
            for (var i = 0; i < oldTests.length; i++)
            {
                oldTests[i].parentNode.removeChild(oldTests[i]);
            }
        }

        function setAllBoxes(value) {
            var checkBoxes = document.getElementById('featureList').elements;
            for (var i = 0; i < checkBoxes.length; i++) {
                if (checkBoxes[i].hasOwnProperty('checked')) {
                    checkBoxes[i].checked = value;
                }
            }
        }


        document.addEventListener("webworksready", function () {
            document.getElementById('start').onclick = function () {
                removeOldTests();
                setJasmine();
                execJasmine();
            };
            document.getElementById('selectAll').onclick = function () {
                setAllBoxes(true);
            };
            document.getElementById('deselectAll').onclick = function () {
                setAllBoxes(false);
            };
            document.getElementById('clearJasmine').onclick = function () {
                setJasmine();
            };

            var runner = jasmineEnv.currentRunner();
            runner.suites().forEach(function (suite) {
                if (suite.parentSuite === null)
                {
                    var checkbox = document.createElement('input');
                    checkbox.type='checkbox';
                    checkbox.id = suite.id;
                    var label = document.createElement('label');
                    label.htmlFor = suite.id;
                    label.appendChild(document.createTextNode(suite.getFullName()));
                    document.getElementById('featureList').appendChild(checkbox);
                    document.getElementById('featureList').appendChild(label);
                    document.getElementById('featureList').appendChild(document.createElement('br'));
                }
            });
        });

    </script>

</head>

<body>
    <input id="backButton" type="button" value="Back" onclick="history.back();"/><br /><br />

    <form id="featureList"></form><br />

    <input id="selectAll" type="button" value="Select All" />
    <input id="deselectAll" type="button" value="De-select All" />
    <input id="clearJasmine" type="button" value="Set Jasmine Environment" />
    <input id="start" type="button" value="Run Jasmine" /><br />

</body>
</html>
